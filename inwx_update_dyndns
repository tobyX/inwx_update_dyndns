#!/usr/bin/env python3

import sys
import subprocess
import ipaddress
from time import sleep
import toml
import requests

def obtain_ip(commands, version):
    command, *fallbacks = commands
    cmd_string = " ".join(command)
    try:
        ip_string = subprocess.check_output(command).decode('ascii').strip()
        if version == 4:
            return ipaddress.IPv4Address(ip_string)
        elif version == 6:
            return ipaddress.IPv6Address(ip_string)
    except Exception as e:
        error_str = "Exception caught while running command \"{}\": {}"
        print(error_str.format(cmd_string, e), file=sys.stderr)
        if fallbacks:
            return obtain_ip(fallbacks, version)
        else:
            raise e
            
def update_ips(settings, cached_data):
    new_data = {"ipv4": "", "ipv6": ""}
    try:
        new_data["ipv4"] = obtain_ip(settings["ipv4_commands"], 4)
        
        if settings["ipv6_enabled"]:
            new_data["ipv6"] = obtain_ip(settings["ipv6_commands"], 6)
        
        if new_data["ipv4"] != cached_data["ipv4"] or (settings["ipv6_enabled"] and new_data["ipv6"] != cached_data["ipv6"]):
            url = "https://dyndns.inwx.com/nic/update?myip={}".format(new_data["ipv4"])
            
            if settings["ipv6_enabled"]:
                url += "&myipv6={}".format(new_data["ipv6"])
                
            for account in settings["account"]:
                r = requests.post(url, auth=(account["username"], account["password"]))
                print("inwx server replied:", r.text)
                
            with open("/var/local/inwx_cache.toml") as f:
                toml.dumps(new_data)
        
        return True

    except:
        # Exception might be raised if there is no internet connectivity temporarily.
        print("All commands failed to obtain a valid IP address.", file=sys.stderr)
        return False

with open("/etc/inwx_update_dyndns.toml") as f:
    settings = toml.loads(f.read())

if not settings["ipv4_commands"]:
    print("At least one ipv4_command must be defined.", file=sys.stderr)
if not settings["ipv6_commands"]:
    print("At least one ipv6_command must be defined.", file=sys.stderr)
    
with open("/var/local/inwx_cache.toml") as f:
    cached_data = toml.loads(f.read())

while not update_ips(settings, cached_data):
    sleep(settings[""])
